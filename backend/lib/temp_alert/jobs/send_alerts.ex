defmodule TempAlert.Jobs.SendAlerts do
  use GenServer
  alias TempAlert.Storage
  alias TempAlert.Utils.DateTimeHelper

  def start_link(_) do
    GenServer.start_link(__MODULE__, %{}, name: __MODULE__)
  end

  def init(state) do
    schedule_work()
    {:ok, state}
  end

  def handle_info(:work, state) do
    send_due_alerts()
    schedule_work()
    {:noreply, state}
  end

  defp schedule_work do
    Process.send_after(self(), :work, :timer.seconds(10))
  end

  defp send_due_alerts do
    now = DateTime.utc_now()
    due_alerts = Storage.get_due_alerts(now)

    Enum.each(due_alerts, fn alert ->
      send_alert(alert)
      Storage.delete_alert(alert.id)
    end)
  end

  defp send_alert(alert) do
    alertmanager_url = Application.get_env(:temp_alert, :alertmanager_url)

    payload = [
      %{
        "labels" => %{
          "alertname" => "TempAlert",
          "instance" => alert.instance,
          "severity" => "warning"
        },
        "annotations" => %{
          "summary" => alert.message,
          "description" => "Generated by TempAlert system"
        },
        "startsAt" => alert.notify_at,
        "endsAt" => DateTimeHelper.add_one_hour(alert.notify_at),
        "generatorURL" => "http://example.com"
      }
    ]

    {:ok, _} =
      HTTPoison.post(URI.merge(alertmanager_url, "/api/v2/alerts"), Jason.encode!(payload), [
        {"Content-Type", "application/json"}
      ])
  end
end
