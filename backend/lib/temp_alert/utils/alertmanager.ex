defmodule TempAlert.Utils.Alertmanager do
  alias TempAlert.Schemas.Alert
  alias TempAlert.Utils.DateTimeHelper

  @doc """
  Prepares the payload for the Alertmanager.
  """
  @spec prepare_payload(alert :: Alert) :: map()
  def prepare_payload(alert) do
    %{
      "labels" => %{
        "alertname" => "TempAlert",
        "instance" => alert.instance,
        "severity" => "warning"
      },
      "annotations" => %{
        "summary" => alert.message,
        "description" => "Generated by TempAlert system"
      },
      "startsAt" => alert.notify_at,
      "endsAt" => DateTimeHelper.add_one_hour(alert.notify_at),
      "generatorURL" => "http://example.com"
    }
  end

  @doc """
  Sends an alert to the Alertmanager.
  """
  @spec create_alert(alert :: Alert) :: {:ok, any()} | {:error, any()}
  def create_alert(alert) do
    alertmanager_url = Application.get_env(:temp_alert, :alertmanager_url)
    payload = prepare_payload(alert)

    HTTPoison.post(
      URI.merge(alertmanager_url, "/api/v2/alerts"),
      Jason.encode!([payload]),
      [{"Content-Type", "application/json"}]
    )
  end
end
