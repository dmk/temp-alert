defmodule TempAlert.Utils.Alertmanager do
  @moduledoc """
  The `TempAlert.Utils.Alertmanager` module provides functions to prepare and send alerts to the Alertmanager.

  This module interacts with the Alertmanager by preparing the alert payload and sending it using HTTP requests. It ensures the alert data is formatted correctly and includes necessary information such as labels, annotations, and time intervals.

  ## Functions

    - `prepare_payload/1`: Prepares the payload for the Alertmanager.
    - `create_alert/1`: Sends an alert to the Alertmanager.

  ## Examples

      iex> alert = %TempAlert.Schemas.Alert{
      ...>   id: "1",
      ...>   instance: "example-instance",
      ...>   message: "This is a test alert",
      ...>   timestamp: "2024-07-12T00:00:00Z",
      ...>   notify_at: "2024-07-13T00:00:00Z",
      ...> }
      iex> payload = TempAlert.Utils.Alertmanager.prepare_payload(alert)
      %{
        "labels" => %{
          "alertname" => "TempAlert",
          "instance" => "example-instance",
          "severity" => "warning"
        },
        "annotations" => %{
          "summary" => "This is a test alert",
          "description" => "Generated by TempAlert system"
        },
        "startsAt" => "2024-07-13T00:00:00Z",
        "endsAt" => "2024-07-13T01:00:00Z",
        "generatorURL" => "http://example.com"
      }

      iex> TempAlert.Utils.Alertmanager.create_alert(alert)
      {:ok, %HTTPoison.Response{status_code: 200, body: "..."}}
  """

  alias TempAlert.Schemas.Alert

  @doc """
  Prepares the payload for the Alertmanager.

  This function formats the alert data into a map that conforms to the Alertmanager API requirements. It includes labels, annotations, and time intervals.

  ## Parameters

    - `alert`: An `Alert` struct containing the alert data.

  ## Returns

    - A map representing the payload to be sent to the Alertmanager.

  ## Examples

      iex> alert = %TempAlert.Schemas.Alert{
      ...>   id: "1",
      ...>   instance: "example-instance",
      ...>   message: "This is a test alert",
      ...>   timestamp: "2024-07-12T00:00:00Z",
      ...>   notify_at: "2024-07-13T00:00:00Z",
      ...> }
      iex> TempAlert.Utils.Alertmanager.prepare_payload(alert)
      %{
        "labels" => %{
          "alertname" => "TempAlert",
          "instance" => "example-instance",
          "severity" => "warning"
        },
        "annotations" => %{
          "summary" => "This is a test alert",
          "description" => "Generated by TempAlert system"
        },
        "startsAt" => "2024-07-13T00:00:00Z",
        "endsAt" => "2024-07-13T01:00:00Z",
        "generatorURL" => "http://example.com"
      }
  """
  @spec prepare_payload(alert :: Alert.t()) :: map()
  def prepare_payload(alert) do
    %{
      "labels" => %{
        "alertname" => "TempAlert",
        "instance" => alert.instance,
        "severity" => "warning"
      },
      "annotations" => %{
        "summary" => alert.message,
        "description" => "Generated by TempAlert system"
      },
      "startsAt" => DateTime.to_iso8601(alert.notify_at),
      "endsAt" => DateTime.to_iso8601(DateTime.add(alert.notify_at, 1, :hour)),
      "generatorURL" => "http://example.com"
    }
  end

  @doc """
  Sends an alert to the Alertmanager.

  This function sends a POST request to the Alertmanager API with the prepared payload.

  ## Parameters

    - `alert`: An `Alert` struct containing the alert data.

  ## Returns

    - `{:ok, response}` if the request is successful.
    - `{:error, reason}` if the request fails.

  ## Examples

      iex> alert = %TempAlert.Schemas.Alert{
      ...>   id: "1",
      ...>   instance: "example-instance",
      ...>   message: "This is a test alert",
      ...>   timestamp: "2024-07-12T00:00:00Z",
      ...>   notify_at: "2024-07-13T00:00:00Z",
      ...> }
      iex> TempAlert.Utils.Alertmanager.create_alert(alert)
      {:ok, %HTTPoison.Response{status_code: 200, body: "..."}}
  """
  @spec create_alert(alert :: Alert.t()) :: {:ok, any()} | {:error, any()}
  def create_alert(alert) do
    alertmanager_url = Application.get_env(:temp_alert, :alertmanager_url)
    payload = prepare_payload(alert)

    HTTPoison.post(
      URI.merge(alertmanager_url, "api/v2/alerts"),
      Jason.encode!([payload]),
      [{"Content-Type", "application/json"}]
    )
  end
end
